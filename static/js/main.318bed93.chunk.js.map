{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","api.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","playload","currentTodoReducer","state","action","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","isLoading","dispatch","length","className","map","id","title","completed","isSelected","onClick","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","TodoFilter","useState","setTodos","useEffect","allTodos","filteredTodos","newFilter","newQuery","lowerQuery","toLowerCase","includes","Error","onSubmit","event","preventDefault","value","onChange","target","filterActions","todosActions","placeholder","String","handleFilter","style","pointerEvents","Loader","TodoModal","selectedUser","setSelectedUser","setIsLoading","name","email","userId","user","finally","href","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.318bed93.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = {\n  type: 'currentTodo/REMOVE';\n  playload: null;\n};\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({\n  type: 'currentTodo/REMOVE',\n  playload: null,\n});\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return action.playload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'query/SET',\n  playload: string,\n};\n\ntype SetStatusAction = {\n  type: 'status/SET',\n  playload: Status,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET',\n  playload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'status/SET',\n  playload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = { query: string, status: Status };\ntype Action = SetQueryAction | SetStatusAction ;\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...state, query: action.playload };\n    case 'status/SET':\n      return { ...state, status: action.playload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  playload: Todo[]\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  playload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[] | [];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.playload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ninterface TodoListProps {\n  isLoading: boolean,\n}\n\nexport const TodoList = ({ isLoading }: TodoListProps) => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      {!todos.length && !isLoading && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => {\n            const {\n              id, title, completed,\n            } = todo;\n\n            const isSelected = id === currentTodo?.id;\n\n            return (\n              <tr\n                data-cy=\"todo\"\n                className={isSelected ? 'has-background-info-light' : ''}\n                key={id}\n              >\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={`has-text-${completed ? 'success' : 'danger'}`}>\n                    {title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(actions.setTodo(todo));\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className={`far fa-eye${isSelected ? '-slash' : ''}`} />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { actions as todosActions } from '../../features/todos';\nimport { Status } from '../../types/Status';\nimport { getTodos } from '../../api';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoFilter: React.FC = () => {\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos().then(allTodos => setTodos(allTodos));\n  }, []);\n\n  const filteredTodos = (newFilter: string, newQuery: string) => {\n    return todos.filter(todo => {\n      const lowerQuery = newQuery.toLowerCase();\n      const hasTitle = todo.title.toLowerCase().includes(lowerQuery);\n\n      if (!hasTitle) {\n        return false;\n      }\n\n      switch (newFilter) {\n        case 'all':\n          return true;\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          throw new Error('wrong filter selected');\n      }\n    });\n  };\n\n  const handleReset = () => {\n    dispatch(filterActions.setQuery(''));\n    dispatch(todosActions.setTodos(filteredTodos(filter.status, '')));\n  };\n\n  const handleSelectedFilter = (event: ChangeEvent<HTMLSelectElement>) => {\n    const newFilter = event.target.value as Status;\n\n    dispatch(filterActions.setStatus(newFilter));\n    dispatch(todosActions.setTodos(filteredTodos(newFilter, filter.query)));\n  };\n\n  const handleFilter = (event: ChangeEvent<HTMLInputElement>) => {\n    const newQuery = String(event.target.value);\n\n    dispatch(filterActions.setQuery(newQuery));\n    dispatch(todosActions.setTodos(filteredTodos(filter.status, newQuery)));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.status}\n            onChange={handleSelectedFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={(event) => handleFilter(event)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleReset()}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { id, title, completed } = currentTodo || {};\n  const { name, email } = selectedUser || {};\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(user => setSelectedUser(user)).finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(actions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className={`has-text-${completed ? 'success' : 'danger'}`}>\n                  {completed ? 'Done' : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${email}`}>\n                  {name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getTodos().then(todos => dispatch(actions.setTodos(todos))).finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList isLoading={isLoading} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}